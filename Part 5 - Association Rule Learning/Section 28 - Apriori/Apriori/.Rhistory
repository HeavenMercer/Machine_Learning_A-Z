print("Hallo word!")
setwd("C:/Users/AFGHAN/Desktop/Machine_Learning_A-Z/Part 3 - Classification/Section 20 - Random Forest Classification")
install.packages('randomForest')
# Random Forest Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("C:/Users/AFGHAN/Desktop/Machine_Learning_A-Z/Part 4 - Clustering/Section 24 - K-Means Clustering")
# K-Means Clustering
# Importing the mall dataset
daaset <- read.csv("mall.csv")
# K-Means Clustering
# Importing the mall dataset
daaset <- read.csv("Mall_Customers.csv")
# K-Means Clustering
# Importing the mall dataset
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[4:5]
View(X)
View(X)
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for(i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", main = paste('Clusters of clients'), xlab = "Number of clusters", ylab = "WCSS")
# Applying k-means to the mall dataset
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
# Visualising the clasters
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = "Annual Income",
ylab = "Spending Score")
setwd("C:/Users/AFGHAN/Desktop/Machine_Learning_A-Z/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
# Impoting the mall dataset
dataset = read.csv('Mall_Customers.csv')
View(dataset)
View(dataset)
X = dataset[4:5]
View(X)
View(X)
# Using the dendrogram to find the optimal number of clusters
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = 'Customers',
ylab = 'Euclidean distance')
# Fitting hierarchical clustering to the mall dataset
hc = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(hc, 5)
# Visualising the clusters
library(cluster)
clusplot(dataset,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
setwd("C:/Users/AFGHAN/Desktop/Machine_Learning_A-Z/Part 5 - Association Rule Learning/Section 28 - Apriori/Apriori")
# Apriori
# Data Preprocesing
dataset = read.csv('Marker_Basket_Optimisation.csv')
# Apriori
# Data Preprocesing
dataset = read.csv('Market_Basket_Optimisation.csv')
View(dataset)
# Apriori
# Data Preprocesing
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
View(dataset)
install.packages('arules')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
library(arules)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
suppary(dataset)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 20)
itemFrequencyPlot(dataset, topN = 20)
itemFrequencyPlot(dataset, topN = 10)
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
# Training Apriori on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
# Training Apriori on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
# Training Apriori on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
