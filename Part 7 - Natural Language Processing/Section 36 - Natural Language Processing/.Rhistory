print("Hallo word!")
setwd("C:/Users/AFGHAN/Desktop/Machine_Learning_A-Z/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
# Natural Language Processing
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
View(dataset)
View(dataset)
install.packages('tm')
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers(tolower))
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[841]])
corpus = tm_map(corpus, removePunctuation)
install.packages('SnowballC')
library(SnowballC)
# Removing un relevant words
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
# Stemming
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
# Removing extra spaces
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[841]])
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.99)
corpus = VCorpus(VectorSource(dataset$Review))
# Lower case
corpus = tm_map(corpus, content_transformer(tolower))
# Remowing numbers
corpus = tm_map(corpus, removeNumbers)
# Removing punctuations
corpus = tm_map(corpus, removePunctuation)
# Removing un relevant words
corpus = tm_map(corpus, removeWords, stopwords())
# Stemming
corpus = tm_map(corpus, stemDocument)
# Removing extra spaces
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = a.data.frame(as.matrix(dtm))
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset$Liked = dataset_original$Liked
View(dataset)
View(dataset)
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
